packageinniki;
importjava.io.*;  
importjava.util.Date;  
importjava.awt.*;  
importjava.awt.event.*;  
importjavax.swing.*;  
importjavax.swing.event.*;
importjavax.swing.text.JTextComponent;  
classFileOperation
{  
Notepad npd;  
booleansaved;  
booleannewFileFlag;  
String fileName;  
String applicationTitle="Notepad - JavaTpoint";  
File fileRef;  
JFileChooserchooser;  
booleanisSave(){returnsaved;}  
voidsetSave(booleansaved){this.saved=saved;}  
String getFileName(){returnnew String(fileName);}  
voidsetFileName(String fileName){this.fileName=new String(fileName);}  FileOperation(Notepad1 npd)  
{  
this.npd=npd;  
saved=true;  
newFileFlag=true;  
fileName=new String("Untitled");  
fileRef=new File(fileName);  
this.npd.f.setTitle(fileName+" - "+applicationTitle);  
chooser=newJFileChooser();  
chooser.addChoosableFileFilter(newMyFileFilter());  
chooser.addChoosableFileFilter(newMyFileFilter());  
chooser.setCurrentDirectory(new File("."));  
}  
booleansaveFile(File temp)  
{  
FileWriterfout=null;  
try
{  
fout=newFileWriter(temp);  
fout.write(npd.ta.getText());  
}  
catch(IOExceptionioe){updateStatus(temp,false);returnfalse;}  
finally
{try{fout.close();}catch(IOExceptionexcp){}}  
updateStatus(temp,true);  
returntrue;  
} 
booleansaveThisFile()  
{  
if(!newFileFlag)  
{returnsaveFile(fileRef);}  
returnsaveAsFile();  
}  
booleansaveAsFile()  
{  
File temp=null;  
chooser.setDialogTitle("Save As...");  
chooser.setApproveButtonText("Save Now");   
chooser.setApproveButtonMnemonic(KeyEvent.VK_S);  
chooser.setApproveButtonToolTipText("Click me to save!");  
do
{  
if(chooser.showSaveDialog(this.npd.f)!=JFileChooser.APPROVE_OPTION)  
returnfalse;  
temp=chooser.getSelectedFile();  
if(!temp.exists()) break;  
if(  JOptionPane.showConfirmDialog(  
this.npd.f,"<html>"+temp.getPath()+" already exists.<br>Do you want to replace it?<html>",  
"Save As",JOptionPane.YES_NO_OPTION
)==JOptionPane.YES_OPTION)  
break;  
}while(true);  
returnsaveFile(temp);  
}  
booleanopenFile(File temp)  
{  
FileInputStreamfin=null;  
BufferedReaderdin=null;  
try
{  
fin=newFileInputStream(temp);  
din=newBufferedReader(newInputStreamReader(fin));  
String str=" ";  
while(str!=null)  
{  
str=din.readLine();  
if(str==null)  
break;  
this.npd.ta.append(str+"\n");  
}  
}  
catch(IOExceptionioe){updateStatus(temp,false);returnfalse;}  
finally
{try{din.close();fin.close();}catch(IOExceptionexcp){}}  
updateStatus(temp,true);  
this.npd.ta.setCaretPosition(0);  
returntrue;  
}  
voidopenFile()  
{  
if(!confirmSave()) return;  
chooser.setDialogTitle("Open File...");  
chooser.setApproveButtonText("Open this");   
chooser.setApproveButtonMnemonic(KeyEvent.VK_O);  
chooser.setApproveButtonToolTipText("Click me to open the selected file.!");  
File temp=null;  
do
{  
if(chooser.showOpenDialog(this.npd.f)!=JFileChooser.APPROVE_OPTION)  
return;  
temp=chooser.getSelectedFile();  

if(temp.exists())   break;  

JOptionPane.showMessageDialog(this.npd.f,  
"<html>"+temp.getName()+"<br>file not found.<br>"+  
"Please verify the correct file name was given.<html>",  
"Open", JOptionPane.INFORMATION_MESSAGE);  

} while(true);  

this.npd.ta.setText("");  

if(!openFile(temp))  
    {  
fileName="Untitled"; saved=true;   
this.npd.f.setTitle(fileName+" - "+applicationTitle);  
    }  
if(!temp.canWrite())  
newFileFlag=true;  

}  
voidupdateStatus(File temp,booleansaved)  
{  
if(saved)  
{  
this.saved=true;  
fileName=new String(temp.getName());  
if(!temp.canWrite())  
    {fileName+="(Read only)"; newFileFlag=true;}  
fileRef=temp;  
npd.f.setTitle(fileName + " - "+applicationTitle);  
((JTextComponent) npd.statusBar).setText("File : "+temp.getPath()+" saved/opened successfully.");  
newFileFlag=false;  
}  
else
{  
((JTextComponent) npd.statusBar).setText("Failed to save/open : "+temp.getPath());  
}  
}  
booleanconfirmSave()  
{  
String strMsg="<html>The text in the "+fileName+" file has been changed.<br>"+  
"Do you want to save the changes?<html>";  
if(!saved)  
{  
intx=JOptionPane.showConfirmDialog(this.npd.f,strMsg,applicationTitle,  
JOptionPane.YES_NO_CANCEL_OPTION);  

if(x==JOptionPane.CANCEL_OPTION) returnfalse;  
if(x==JOptionPane.YES_OPTION&& !saveAsFile()) returnfalse;  
}  
returntrue;  
}  
voidnewFile()  
{  
if(!confirmSave()) return;  

this.npd.ta.setText("");  
fileName=new String("Untitled");  
fileRef=new File(fileName);  
saved=true;  
newFileFlag=true;  
this.npd.f.setTitle(fileName+" - "+applicationTitle);  
}  
}// end defination of class FileOperation
publicclass Notepad1  implements ActionListener, MenuConstants
{  
JFramef;  
JTextAreata;  
JLabelstatusBar;  
private String fileName="Untitled";  
privatebooleansaved=true;  
String applicationName="Javapad";  
String searchString, replaceString;  
intlastSearchIndex;  
FileOperationfileHandler;  
FontChooserfontDialog=null;  
FindDialogfindReplaceDialog=null;   
JColorChooserbcolorChooser=null;  
JColorChooserfcolorChooser=null;  
JDialogbackgroundDialog=null;  
JDialogforegroundDialog=null;  
JMenuItemcutItem,copyItem, deleteItem, findItem, findNextItem,  
replaceItem, gotoItem, selectAllItem;  
Notepad1()  
{  
f=newJFrame(fileName+" - "+applicationName);  
ta=newJTextArea(30,60);  
statusBar=newJLabel("||       Ln 1, Col 1  ",JLabel.RIGHT);  
f.add(newJScrollPane(ta),BorderLayout.CENTER);  
f.add(statusBar,BorderLayout.SOUTH);  
f.add(newJLabel("  "),BorderLayout.EAST);  
f.add(newJLabel("  "),BorderLayout.WEST);  
createMenuBar(f);  
//f.setSize(350,350);  
f.pack();  
f.setLocation(100,50);  
f.setVisible(true);  
f.setLocation(150,50);  
f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
fileHandler=newFileOperation(this);  
ta.addCaretListener(  
newCaretListener()  
{  
publicvoidcaretUpdate(CaretEvente)  
{  
intlineNumber=0, column=0, pos=0;  
try
{  
pos=ta.getCaretPosition();  
lineNumber=ta.getLineOfOffset(pos);  
column=pos-ta.getLineStartOffset(lineNumber);  
}catch(Exception excp){}  
if(ta.getText().length()==0){lineNumber=0; column=0;}  
statusBar.setText("||       Ln "+(lineNumber+1)+", Col "+(column+1));  
}  
});  
DocumentListenermyListener = newDocumentListener()  
{  
publicvoidchangedUpdate(DocumentEvente){fileHandler.saved=false;}  
publicvoidremoveUpdate(DocumentEvente){fileHandler.saved=false;}  
publicvoidinsertUpdate(DocumentEvente){fileHandler.saved=false;}  
};  
ta.getDocument().addDocumentListener(myListener);  
WindowListenerframeClose=newWindowAdapter()  
{  
publicvoidwindowClosing(WindowEventwe)  
{  
if(fileHandler.confirmSave())System.exit(0);  
}  
};  
f.addWindowListener(frameClose);  
voidgoTo()  
{  
intlineNumber=0;  
try
{  
lineNumber=ta.getLineOfOffset(ta.getCaretPosition())+1;  
String tempStr=JOptionPane.showInputDialog(f,"Enter Line Number:",""+lineNumber);  
if(tempStr==null)  
    {return;}  
lineNumber=Integer.parseInt(tempStr);  
ta.setCaretPosition(ta.getLineStartOffset(lineNumber-1));  
}catch(Exception e){}  
}  
publicvoidactionPerformed(ActionEventev)  
{  
String cmdText=ev.getActionCommand();  
if(cmdText.equals(fileNew))  
fileHandler.newFile();  
elseif(cmdText.equals(fileOpen))  
fileHandler.openFile();  
elseif(cmdText.equals(fileSave))  
fileHandler.saveThisFile();  
elseif(cmdText.equals(fileSaveAs))  
fileHandler.saveAsFile();  
elseif(cmdText.equals(fileExit))  
    {if(fileHandler.confirmSave())System.exit(0);}  
elseif(cmdText.equals(filePrint))  
JOptionPane.showMessageDialog(  
    Notepad1.this.f,  
"Get ur printer repaired first! It seems u dont have one!",  
"Bad Printer",  
JOptionPane.INFORMATION_MESSAGE
    );  
elseif(cmdText.equals(editCut))  
ta.cut();  
elseif(cmdText.equals(editCopy))  
ta.copy();  
elseif(cmdText.equals(editPaste))  
ta.paste();  
elseif(cmdText.equals(editDelete))  
ta.replaceSelection("");  
elseif(cmdText.equals(editFind))  
{  
if(Notepad1.this.ta.getText().length()==0)  
return; // text box have no text  
if(findReplaceDialog==null)  
findReplaceDialog=newFindDialog();  
findReplaceDialog.showDialog(Notepad1.this.f,true);//find  
}  
elseif(cmdText.equals(editFindNext))  
{  
if(Notepad1.this.ta.getText().length()==0)  
return; // text box have no text  

if(findReplaceDialog==null)  
statusBar.setText("Use Find option of Edit Menu first !!!!");  
else
findReplaceDialog.findNextWithSelection();  
}  
elseif(cmdText.equals(editReplace))  
{  
if(Notepad1.this.ta.getText().length()==0)  
return; // text box have no text  

if(findReplaceDialog==null)  
findReplaceDialog=newFindDialog();  
findReplaceDialog.showDialog(Notepad1.this.f,false);//replace  
}  
elseif(cmdText.equals(editGoTo))  
{  
if(Notepad1.this.ta.getText().length()==0)  
return; // text box have no text  
goTo();  
}  
elseif(cmdText.equals(editSelectAll))  
ta.selectAll();  
elseif(cmdText.equals(editTimeDate))  
ta.insert(new Date().toString(),ta.getSelectionStart());  
elseif(cmdText.equals(formatWordWrap))  
{  
JCheckBoxMenuItemtemp=(JCheckBoxMenuItem)ev.getSource();  
ta.setLineWrap(temp.isSelected());  
}  
////////////////////////////////////  
elseif(cmdText.equals(formatFont))  
{  
if(fontDialog==null)  
fontDialog=newFontChooser();  

if(fontDialog.showDialog(Notepad1.this.f,"Choose a font"))  
    Notepad1.this.ta.setFont(fontDialog.createFont());  
}  
elseif(cmdText.equals(formatForeground))  
showForegroundColorDialog();  
elseif(cmdText.equals(formatBackground))  
showBackgroundColorDialog();  
elseif(cmdText.equals(viewStatusBar))  
{  
JCheckBoxMenuItemtemp=(JCheckBoxMenuItem)ev.getSource();  
statusBar.setVisible(temp.isSelected());  
}  
elseif(cmdText.equals(helpAboutNotepad))  
{  
JOptionPane.showMessageDialog(Notepad1.this.f,aboutText,"Dedicated 2 u!",  
JOptionPane.INFORMATION_MESSAGE);  
}  
else
statusBar.setText("This "+cmdText+" command is yet to be implemented");  
}//action Performed  
voidshowBackgroundColorDialog()  
{  
if(bcolorChooser==null)  
bcolorChooser=newJColorChooser();  
if(backgroundDialog==null)  
backgroundDialog=JColorChooser.createDialog
        (Notepad1.this.f,  
formatBackground,  
false,  
bcolorChooser,  
newActionListener()  
        {publicvoidactionPerformed(ActionEventevvv){  
            Notepad1.this.ta.setBackground(bcolorChooser.getColor());}},  
null);        

backgroundDialog.setVisible(true);  
}  
voidshowForegroundColorDialog()  
{  
if(fcolorChooser==null)  
fcolorChooser=newJColorChooser();  
if(foregroundDialog==null)  
foregroundDialog=JColorChooser.createDialog
        (Notepad1.this.f,  
formatForeground,  
false,  
fcolorChooser,  
newActionListener()  
        {publicvoidactionPerformed(ActionEventevvv){  
            Notepad1.this.ta.setForeground(fcolorChooser.getColor());}},  
null);        

foregroundDialog.setVisible(true);  
}  
JMenuItemcreateMenuItem(String s, intkey,JMenutoMenu,ActionListeneral)  
{  
JMenuItemtemp=newJMenuItem(s,key);  
temp.addActionListener(al);  
toMenu.add(temp);  

returntemp;  
}  
JMenuItemcreateMenuItem(String s, intkey,JMenutoMenu,intaclKey,ActionListeneral)  
{  
JMenuItemtemp=newJMenuItem(s,key);  
temp.addActionListener(al);  
temp.setAccelerator(KeyStroke.getKeyStroke(aclKey,ActionEvent.CTRL_MASK));  
toMenu.add(temp);  

returntemp;  
}  
JCheckBoxMenuItemcreateCheckBoxMenuItem(String s,  
intkey,JMenutoMenu,ActionListeneral)  
{  
JCheckBoxMenuItemtemp=newJCheckBoxMenuItem(s);  
temp.setMnemonic(key);  
temp.addActionListener(al);  
temp.setSelected(false);  
toMenu.add(temp);  

returntemp;  
}  
JMenucreateMenu(String s,intkey,JMenuBartoMenuBar)  
{  
JMenutemp=newJMenu(s);  
temp.setMnemonic(key);  
toMenuBar.add(temp);  
returntemp;  
}  
/*********************************/
voidcreateMenuBar(JFramef)  
{  
JMenuBarmb=newJMenuBar();  
JMenuItemtemp;  
JMenufileMenu=createMenu(fileText,KeyEvent.VK_F,mb);  
JMenueditMenu=createMenu(editText,KeyEvent.VK_E,mb);  
JMenuformatMenu=createMenu(formatText,KeyEvent.VK_O,mb);  
JMenuviewMenu=createMenu(viewText,KeyEvent.VK_V,mb);  
JMenuhelpMenu=createMenu(helpText,KeyEvent.VK_H,mb);  
createMenuItem(fileNew,KeyEvent.VK_N,fileMenu,KeyEvent.VK_N,this);  
createMenuItem(fileOpen,KeyEvent.VK_O,fileMenu,KeyEvent.VK_O,this);  
createMenuItem(fileSave,KeyEvent.VK_S,fileMenu,KeyEvent.VK_S,this);  
createMenuItem(fileSaveAs,KeyEvent.VK_A,fileMenu,this);  
fileMenu.addSeparator();  
temp=createMenuItem(filePageSetup,KeyEvent.VK_U,fileMenu,this);  
temp.setEnabled(false);  
createMenuItem(filePrint,KeyEvent.VK_P,fileMenu,KeyEvent.VK_P,this);  
fileMenu.addSeparator();  
createMenuItem(fileExit,KeyEvent.VK_X,fileMenu,this);  
temp=createMenuItem(editUndo,KeyEvent.VK_U,editMenu,KeyEvent.VK_Z,this);  
temp.setEnabled(false);  
editMenu.addSeparator();  
cutItem=createMenuItem(editCut,KeyEvent.VK_T,editMenu,KeyEvent.VK_X,this);  
copyItem=createMenuItem(editCopy,KeyEvent.VK_C,editMenu,KeyEvent.VK_C,this);  
createMenuItem(editPaste,KeyEvent.VK_P,editMenu,KeyEvent.VK_V,this);  
deleteItem=createMenuItem(editDelete,KeyEvent.VK_L,editMenu,this);  
deleteItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0));  
editMenu.addSeparator();  
findItem=createMenuItem(editFind,KeyEvent.VK_F,editMenu,KeyEvent.VK_F,this);  
findNextItem=createMenuItem(editFindNext,KeyEvent.VK_N,editMenu,this);  
findNextItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3,0));  
replaceItem=createMenuItem(editReplace,KeyEvent.VK_R,editMenu,KeyEvent.VK_H,this);  
gotoItem=createMenuItem(editGoTo,KeyEvent.VK_G,editMenu,KeyEvent.VK_G,this);  
editMenu.addSeparator();  
selectAllItem=createMenuItem(editSelectAll,KeyEvent.VK_A,editMenu,KeyEvent.VK_A,this);  
createMenuItem(editTimeDate,KeyEvent.VK_D,editMenu,this)  
.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5,0));  
createCheckBoxMenuItem(formatWordWrap,KeyEvent.VK_W,formatMenu,this);  
createMenuItem(formatFont,KeyEvent.VK_F,formatMenu,this);  
formatMenu.addSeparator();  
createMenuItem(formatForeground,KeyEvent.VK_T,formatMenu,this);  
createMenuItem(formatBackground,KeyEvent.VK_P,formatMenu,this);  

createCheckBoxMenuItem(viewStatusBar,KeyEvent.VK_S,viewMenu,this).setSelected(true);  
LookAndFeelMenu.createLookAndFeelMenuItem(viewMenu,this.f);  
temp=createMenuItem(helpHelpTopic,KeyEvent.VK_H,helpMenu,this);  
temp.setEnabled(false);  
helpMenu.addSeparator();  
createMenuItem(helpAboutNotepad,KeyEvent.VK_A,helpMenu,this);  
MenuListenereditMenuListener=newMenuListener()  
{  
publicvoidmenuSelected(MenuEventevvvv)  
    {  
if(Notepad1.this.ta.getText().length()==0)  
    {  
findItem.setEnabled(false);  
findNextItem.setEnabled(false);  
replaceItem.setEnabled(false);  
selectAllItem.setEnabled(false);  
gotoItem.setEnabled(false);  
    }  
else
    {  
findItem.setEnabled(true);  
findNextItem.setEnabled(true);  
replaceItem.setEnabled(true);  
selectAllItem.setEnabled(true);  
gotoItem.setEnabled(true);  
    }  
if(Notepad1.this.ta.getSelectionStart()==ta.getSelectionEnd())  
    {  
cutItem.setEnabled(false);  
copyItem.setEnabled(false);  
deleteItem.setEnabled(false);  
    }  
else
    {  
cutItem.setEnabled(true);  
copyItem.setEnabled(true);  
deleteItem.setEnabled(true);  
    }  
    }  
publicvoidmenuDeselected(MenuEventevvvv){}  
publicvoidmenuCanceled(MenuEventevvvv){}  
};  
editMenu.addMenuListener(editMenuListener);  
f.setJMenuBar(mb);  
}  
publicstaticvoidmain(String[] s)  
{  
new Notepad1();  
}  
}  
interfaceMenuConstants
{  
final String fileText="File";  
final String editText="Edit";  
final String formatText="Format";  
final String viewText="View";  
final String helpText="Help";  

final String fileNew="New";  
final String fileOpen="Open...";  
final String fileSave="Save";  
final String fileSaveAs="Save As...";  
final String filePageSetup="Page Setup...";  
final String filePrint="Print";  
final String fileExit="Exit";  
final String editUndo="Undo";  
final String editCut="Cut";  
final String editCopy="Copy";  
final String editPaste="Paste";  
final String editDelete="Delete";  
final String editFind="Find...";  
final String editFindNext="Find Next";  
final String editReplace="Replace";  
final String editGoTo="Go To...";  
final String editSelectAll="Select All";  
final String editTimeDate="Time/Date";  
final String formatWordWrap="Word Wrap";  
final String formatFont="Font...";  
final String formatForeground="Set Text color...";  
final String formatBackground="Set Pad color...";  
final String viewStatusBar="Status Bar";  
final String helpHelpTopic="Help Topic";  
final String helpAboutNotepad="About Javapad";  
final String aboutText="Your Javapad";  
}
